buildscript {
    ext.kotlin_version = '1.3.11'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group = 'io.github.vovak.astminer'
version = '0.2'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'antlr'

apply plugin: 'idea'
apply plugin: 'application'

apply plugin: 'maven-publish'
apply plugin: 'signing'

mainClassName = 'astminer.MainKt'

defaultTasks 'run'

repositories {
    mavenLocal()
    mavenCentral()
}

/**
 * Without the next section Gradle will add a 'compile' dependency on Antlr3:
 * https://github.com/gradle/gradle/issues/820
 */
configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

def generatedSourcesPath = "src/main/generated"

dependencies {
    antlr "org.antlr:antlr4:4.7.1"
    compile "org.antlr:antlr4-runtime:4.7.1"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    // https://mvnrepository.com/artifact/com.github.gumtreediff/core
    compile group: 'com.github.gumtreediff', name: 'core', version: '2.1.0'
    // https://mvnrepository.com/artifact/com.github.gumtreediff/client
    compile group: 'com.github.gumtreediff', name: 'client', version: '2.1.0'
    // https://mvnrepository.com/artifact/com.github.gumtreediff/gen.jdt
    compile group: 'com.github.gumtreediff', name: 'gen.jdt', version: '2.1.0'
    testCompile "junit:junit:4.11"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

task runCppExample(type: JavaExec) {
    main = 'astminer.examples.CppExample'
    classpath = sourceSets.main.runtimeClasspath
}

task performanceTest(type: JavaExec) {
    main = 'astminer.performance.PerformanceTest'
    classpath = sourceSets.main.runtimeClasspath
}

generateGrammarSource {
    maxHeapSize = "64m"
    exclude(["CoarseSimpleDecl.g4", "Common.g4", "Expressions.g4", "FineSimpleDecl.g4",
             "FunctionDef.g4", "ModuleLex.g4", "SimpleDecl.g4"])
    arguments += ['-package', 'me.vovak.antlr.parser']
    // Keep a copy of generated sources
    doLast {
        println "Copying generated grammar lexer/parser files to main directory."
        copy {
            from "${buildDir}/generated-src/antlr/main"
            into "${generatedSourcesPath}/me/vovak/antlr/parser"
        }
        file("${buildDir}/generated-src/antlr").deleteDir()
    }
    // Run when source dir has changed or was removed
    outputs.dir(generatedSourcesPath)
}

clean.doLast {
    file(generatedSourcesPath).deleteDir()
}

compileKotlin.dependsOn generateGrammarSource
compileJava.dependsOn generateGrammarSource

sourceSets.main.java.srcDir file(generatedSourcesPath)

idea {
    module {
        generatedSourceDirs += file(generatedSourcesPath)
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.github.vovak'
            artifactId 'astminer'
            version '0.2'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = it.file.path.reverse().take(7).reverse()
                }
            }
        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username System.getenv('SONATYPE_USERNAME')
                password System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Extract AST and AST-related metrics from source code'
            name 'AST miner'
            url 'https://github.com/vovak/astminer'
            organization {
                name 'io.github.vovak'
                url 'https://github.com/vovak'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/vovak/astminer/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://github.com/vovak/astminer/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/vovak/astminer'
                connection 'scm:git:git://github.com/vovak/astminer.git'
                developerConnection 'scm:git:ssh://git@github.com:vovak/astminer.git'
            }
            developers {
                developer {
                    name 'Egor Bogomolov'
                    email 'eobogomolov@edu.hse.ru'
                }
                developer {
                    name 'Vladimir Kovalenko'
                    email 'V.V.Kovalenko@tudelft.nl'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
